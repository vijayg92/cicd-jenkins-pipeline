pipeline {

    agent {
        node {
          label 'cldbld01'
        }
    }

    environment {
            TERRAFORM_CMD = 'docker run --network host -w /app -v ${HOME}/.aws:/root/.aws -v ${HOME}/.ssh:/root/.ssh -v `pwd`:/app hashicorp/terraform:light'
            AWS_ACCESS_KEY = credentials('AWS_ACCESS_KEY_DEV')
            AWS_SECRET_KEY = credentials('AWS_SECRET_KEY_DEV')
    }

    stages {

      stage('Checkout SCM') {
         steps {
              checkout([$class: 'GitSCM', branches: [[name: "SDW-2176-HAProxy"]], userRemoteConfigs: [[url: "https://code.citrite.net/scm/sdws/sdwan-services-ops.git"]]])
         }
        }

      stage('Pull Terraform Docker') {
          steps {
              sh('docker pull hashicorp/terraform:light')
          }
      }

      stage('Initialize Terraform') {
        steps {
          dir ('kubernetes/aws/haproxy_management') {
                sh('${TERRAFORM_CMD} init')
          }
        }
      }

      stage('Plan Terraform') {
        steps {
          dir ('kubernetes/aws/haproxy_management') {
            script {
              if( "${DEPLOYMENT_TYPE}" == "dev" ) {
                      AWS_ACCESS_KEY = credentials('AWS_ACCESS_KEY_DEV')
                      AWS_SECRET_KEY = credentials('AWS_SECRET_KEY_DEV')
                  } else if ( "${DEPLOYMENT_TYPE}" == "staging" ) {
                      AWS_ACCESS_KEY = credentials('AWS_ACCESS_KEY_STAGE')
                      AWS_SECRET_KEY = credentials('AWS_SECRET_KEY_STAGE')
                  } else if ( "${DEPLOYMENT_TYPE}" == "prod" ) {
                      AWS_ACCESS_KEY = credentials('AWS_ACCESS_KEY_PROD')
                      AWS_SECRET_KEY = credentials('AWS_SECRET_KEY_PROD')
                  } else {
                      error "Unable to get Deployment Type!!"
                  }
              sh """
                 ${TERRAFORM_CMD} plan --var "aws_access_key=${AWS_ACCESS_KEY}" --var "aws_secret_key=${AWS_SECRET_KEY}" --var "aws_region=${AWS_REGION}"\
                 --var "cidr_address_space=${AWS_VPC_CIDR}" --var "subnet1_address_space=${VPC_SUBNET1_CIDR}" --var "subnet2_address_space=${VPC_SUBNET2_CIDR}" \
                 --var "haproxy_eip1=${HAPROXY_EIP1}" --var "haproxy_eip2=${HAPROXY_EIP2}" --var "private_key_path=dev/terraform-admin.pem"
              """
          }
        }
      }
    }

    stage('Terraform Apply') {
          steps {
            dir ('kubernetes/aws/haproxy_management') {
              script {
                if( "${DEPLOYMENT_TYPE}" == "dev" ) {
                        AWS_ACCESS_KEY = credentials('AWS_ACCESS_KEY_DEV')
                        AWS_SECRET_KEY = credentials('AWS_SECRET_KEY_DEV')
                    } else if ( "${DEPLOYMENT_TYPE}" == "staging" ) {
                        AWS_ACCESS_KEY = credentials('AWS_ACCESS_KEY_STAGE')
                        AWS_SECRET_KEY = credentials('AWS_SECRET_KEY_STAGE')
                    } else if ( "${DEPLOYMENT_TYPE}" == "prod" ) {
                        AWS_ACCESS_KEY = credentials('AWS_ACCESS_KEY_PROD')
                        AWS_SECRET_KEY = credentials('AWS_SECRET_KEY_PROD')
                    } else {
                        error "Unable to get Deployment Type!!"
                    }
                sh """
                   ${TERRAFORM_CMD} plan --var "aws_access_key=${AWS_ACCESS_KEY}" --var "aws_secret_key=${AWS_SECRET_KEY}" --var "aws_region=${AWS_REGION}"\
                   --var "cidr_address_space=${AWS_VPC_CIDR}" --var "subnet1_address_space=${VPC_SUBNET1_CIDR}" --var "subnet2_address_space=${VPC_SUBNET2_CIDR}" \
                   --var "haproxy_eip1=${HAPROXY_EIP1}" --var "haproxy_eip2=${HAPROXY_EIP2}" --var "private_key_path=dev/terraform-admin.pem"
                """
            }
          }
       }
    }
  }
}
